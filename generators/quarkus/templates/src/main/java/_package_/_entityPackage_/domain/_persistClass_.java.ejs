<%#
 Copyright 2020-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.domain;<%
let importApiModelProperty = false;
let importJsonIgnore = false;
let importJsonIgnoreProperties = false;
let importSet = false;
let hasTextBlob = false;
let hasRelationship = relationships.length !== 0;
const uniqueEnums = {};
%>
<%_ include('./imports', {
    fields: fields,
    relationships: relationships,
    importApiModelProperty: importApiModelProperty,
    importJsonIgnore: importJsonIgnore,
    importJsonIgnoreProperties: importJsonIgnoreProperties,
    importSet: importSet,
    uniqueEnums: uniqueEnums
}) _%>
<%_ for (const relationship of relationships) {
        isUsingMapsId = relationship.useJPADerivedIdentifier;
        if ( isUsingMapsId === true) {
            break;
        }
        isUsingMapsId = false;
        if (!importSet && relationship.collection) {
            importSet = true;
        }
    }
    for (const field of fields) {
        if ((prodDatabaseType === 'postgresql' || devDatabaseType === 'postgresql') && field.fieldTypeBlobContent === 'text') {
            hasTextBlob = true;
            break;
        }
    }
_%>
<%_ if (databaseType === 'sql') { _%>
    <%_ if (reactive) { _%>
import io.quarkus.hibernate.reactive.panache.PanacheEntityBase;
    <%} else { %>
import io.quarkus.hibernate.orm.panache.PanacheEntityBase;
    <%_ } _%>
<%_ } _%>
<%_ if (!viaRepository) { _%>
<%_ if (databaseType === 'sql') { _%>
    <%_ if (reactive) { _%>
import io.quarkus.hibernate.reactive.panache.PanacheQuery;
    <%} else { %>
import io.quarkus.hibernate.orm.panache.PanacheQuery;
    <%_ } _%>
<%_ } _%>
<%_ } _%>
import io.quarkus.runtime.annotations.RegisterForReflection;
<%_ if (databaseType === 'cassandra') { _%>
import org.springframework.data.annotation.Id;
    <%_ if (anyFieldIsBlobDerived) { _%>
import org.springframework.data.cassandra.core.mapping.Column;
    <%_ } _%>
import org.springframework.data.cassandra.core.mapping.Table;
<%_ } if (importJsonIgnore === true) { _%>
import com.fasterxml.jackson.annotation.JsonIgnore;
<%_ } if (!dtoMapstruct && typeof javadoc != 'undefined') { _%>
import io.swagger.annotations.ApiModel;
<%_ } if (!dtoMapstruct && importApiModelProperty === true) { _%>
import io.swagger.annotations.ApiModelProperty;
<%_ } if (enableHibernateCache) { _%>
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
<%_ } if (hasTextBlob === true || (anyFieldIsUUID === true && ['mysql', 'mariadb'].includes(prodDatabaseType))) { _%>
import org.hibernate.annotations.Type;
<%_ } if (databaseType === 'mongodb') { _%>
import io.quarkus.mongodb.panache.common.MongoEntity;
import io.quarkus.mongodb.panache.PanacheMongoEntityBase;
import org.bson.codecs.pojo.annotations.BsonId;
<%_ } else if (databaseType === 'couchbase') { _%>
import org.springframework.data.annotation.Id;
import com.couchbase.client.java.repository.annotation.Field;
import org.springframework.data.couchbase.core.mapping.Document;
import org.springframework.data.couchbase.core.mapping.id.GeneratedValue;
import org.springframework.data.couchbase.core.mapping.id.IdPrefix;
    <%_ if (hasRelationship) { _%>
import org.springframework.data.couchbase.core.query.FetchType;
import org.springframework.data.couchbase.core.query.N1qlJoin;
    <%_ } _%>
<%_ } if (databaseType === 'sql') { _%>

import jakarta.persistence.*;
<%_ } if (anyPropertyHasValidation) { _%>
import jakarta.validation.constraints.*;
<%_ } _%>

<%_ if (searchEngine === 'elasticsearch') { _%>
import org.springframework.data.elasticsearch.annotations.FieldType;
<%_ } _%>
import java.io.Serializable;
<%_ if (anyFieldIsBigDecimal === true) { _%>
import java.math.BigDecimal;
<%_ } if (anyFieldIsBlobDerived && databaseType === 'cassandra') { _%>
import java.nio.ByteBuffer;
<%_ } if (anyFieldIsInstant === true) { _%>
import java.time.Instant;
<%_ } if (anyFieldIsLocalDate === true) { _%>
import java.time.LocalDate;
<%_ } if (anyFieldIsZonedDateTime === true) { _%>
import java.time.ZonedDateTime;
<%_ } if (anyFieldIsDuration === true) { _%>
import java.time.Duration;
<%_ } if (importSet === true) { _%>
import java.util.HashSet;
import java.util.Set;
<%_ } if (fieldsContainOwnerManyToMany && (databaseType === 'sql' || databaseType === 'mongodb' || databaseType === 'couchbase')) { _%>
import java.util.Optional;
<%_ } if (databaseType === 'couchbase' && hasRelationship) { _%>
import java.util.stream.Collectors;
<%_ } _%>
<%_ if (databaseType === 'cassandra' || anyFieldIsUUID === true) { _%>
import java.util.UUID;
<%_ }
Object.keys(uniqueEnums).forEach(function(element) { _%>

import <%=packageName%>.domain.enumeration.<%= element %>;
<%_ }); _%>

<%_ if (databaseType === 'couchbase') { _%>
import static <%=packageName%>.config.Constants.ID_DELIMITER;
import static org.springframework.data.couchbase.core.mapping.id.GenerationStrategy.UNIQUE;

<%_ } _%>
<%_ if (!entityJavadoc) { _%>
/**
 * A <%= persistClass %>.
 */
<%_ } else { _%>
<%- entityJavadoc %>
    <%_ if (!dtoMapstruct) { _%>
@ApiModel(description = "<%- entityApiDescription %>")
    <%_ }_%>
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
@Entity
@Table(name = "<%= entityTableName %>")
<%_ if (enableHibernateCache) { _%>
<% if (readOnly) { %>@Cache(usage = CacheConcurrencyStrategy.READ_ONLY)<% } else { %>@Cacheable<% } %>
<%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
@MongoEntity(collection="<%= entityTableName %>")
<%_ } if (databaseType === 'couchbase') { _%>
@Document
<%_ } if (databaseType === 'cassandra') { _%>
@Table("<%= entityInstance %>")
<%_ } if (searchEngine === 'elasticsearch') { _%>
@org.springframework.data.elasticsearch.annotations.Document(indexName = "<%= entityInstance.toLowerCase() %>")
<%_ } _%>
@RegisterForReflection
public class <%= persistClass %> extends <% if (databaseType === 'sql') { %>PanacheEntityBase<% } else if (databaseType === 'mongodb') { %>PanacheMongoEntityBase<% }%> implements Serializable {

    private static final long serialVersionUID = 1L;
    <%_ if (databaseType === 'couchbase') { _%>
    public static final String PREFIX = "<%= entityInstance.toLowerCase() %>";

    @SuppressWarnings("unused")
    @IdPrefix
    private String prefix = PREFIX;
    <%_ } _%>

<%_ if (databaseType === 'sql') { _%>
    @Id
    <%_ if (prodDatabaseType === 'mysql' || prodDatabaseType === 'mariadb') { _%>
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    <%_ }  else { _%>
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequenceGenerator")
    @SequenceGenerator(name = "sequenceGenerator")
    <%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'couchbase') { _%>
    @GeneratedValue(strategy = UNIQUE, delimiter = ID_DELIMITER)
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
    @BsonId
<%_ } _%>
    public <%= primaryKey.type %> id;

<%_ for (const field of fields.filter(field => !field.id)) {
    if (field.fieldJavadoc) { _%>
<%- field.fieldJavadoc %>
    <%_ }
    let required = false;
    let unique = false;
    const fieldValidate = field.fieldValidate;
    const fieldValidateRules = field.fieldValidateRules;
    const fieldValidateRulesMaxlength = field.fieldValidateRulesMaxlength;
    const fieldType = field.fieldType;
    const fieldTypeBlobContent = field.fieldTypeBlobContent;
    const fieldName = field.fieldName;
    const fieldNameUnderscored = field.fieldNameUnderscored;
    const fieldNameAsDatabaseColumn = field.fieldNameAsDatabaseColumn;
    if (fieldValidate === true) {
        if (fieldValidateRules.includes('required')) {
            required = true;
        }
        if (fieldValidateRules.includes('unique')) {
            unique = true;
        } _%>
    <%- include('/_global_partials_entity_/field_validators', {
        field,
    }) -%>
    <%_ } _%>
    <%_ if (!dtoMapstruct && field.fieldApiDescription) { _%>
    @ApiModelProperty(value = "<%- field.fieldApiDescription %>"<% if (required) { %>, required = true<% } %>)
    <%_ } _%>
    <%_ if (databaseType === 'sql') {
        if (field.fieldIsEnum) { _%>
    @Enumerated(EnumType.STRING)
        <%_ }
        if (fieldType === 'byte[]') { _%>
    @Lob
        <%_ if ((prodDatabaseType === 'postgresql' || devDatabaseType === 'postgresql') && fieldTypeBlobContent === 'text' ) { _%>
        <%_ }
        }
        if (['Instant', 'ZonedDateTime', 'LocalDate', 'Duration'].includes(fieldType)) { _%>
    @Column(name = "<%-fieldNameAsDatabaseColumn %>"<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>)
        <%_ } else if (fieldType === 'BigDecimal') { _%>
    @Column(name = "<%-fieldNameAsDatabaseColumn %>", precision = 21, scale = 2<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>)
        <%_ } else if (fieldType === 'UUID' && ['mysql', 'mariadb'].includes(prodDatabaseType)) { _%>
    @Type(type = "uuid-char")
    @Column(name = "<%-fieldNameAsDatabaseColumn %>", length = 36<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>)
        <%_ } else { _%>
    @Column(name = "<%-fieldNameAsDatabaseColumn %>"<% if (fieldValidate === true) { %><% if (fieldValidateRules.includes('maxlength')) { %>, length = <%= fieldValidateRulesMaxlength %><% } %><% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %><% } %>)
        <%_ }
    } _%>
    <%_ if (databaseType === 'couchbase') { _%>
    @Field("<%=fieldNameUnderscored %>")
    <%_ } _%>
    <%_ if (fieldTypeBlobContent !== 'text') { _%>
    public <%= fieldType %> <%= fieldName %>;
    <%_ } else { _%>
     public String <%= fieldName %>;
    <%_ } _%>

    <%_ if ((fieldType === 'byte[]' || fieldType === 'ByteBuffer') && fieldTypeBlobContent !== 'text') { _%>
      <%_ if (databaseType === 'sql' || databaseType === 'cassandra') { _%>
    @Column(<% if (databaseType !== 'cassandra') { %>name = <% } %>"<%-fieldNameAsDatabaseColumn %>_content_type"<% if (required && databaseType !== 'cassandra') { %>, nullable = false<% } %>)
        <%_ if (required && databaseType === 'cassandra') { _%>
    @NotNull
        <%_ } _%>
      <%_ } _%>
      <%_ if (databaseType === 'mongodb' || databaseType === 'couchbase') { _%>
    @Field("<%=fieldNameUnderscored %>_content_type")
      <%_ } _%>
      public String <%= fieldName %>ContentType;

    <%_ }
    }

    for (idx in relationships) {
        const relationship = relationships[idx];
        const otherEntity = relationship.otherEntity;
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;
        const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        if (otherEntityRelationshipName) {
            mappedBy = otherEntityRelationshipName.charAt(0).toLowerCase() + otherEntityRelationshipName.slice(1)
        }
        if (relationship.relationshipJavadoc) { _%>
<%- relationship.relationshipJavadoc %>
            <%_ if (!dtoMapstruct) { _%>
    @ApiModelProperty(value = "<%- relationship.relationshipApiDescription %>")
            <%_ } _%>
    <%_ }
        if (relationshipType === 'one-to-many') {
            if (databaseType === 'sql') {
    _%>
    @OneToMany(mappedBy = "<%= otherEntityRelationshipName %>")
                <%_ if (enableHibernateCache) { _%>
    @Cache(usage = CacheConcurrencyStrategy.<% if (readOnly) { %>READ_ONLY<% } else { %>READ_WRITE<% } %>)
                <%_ } _%>
            <%_ } else if (databaseType === 'mongodb' || databaseType === 'couchbase') {
            if (databaseType === 'mongodb') { _%>
    @DBRef
        <%_ } _%>
    @Field("<%= relationshipFieldName %>")
        <%_ if (databaseType === 'couchbase') { _%>
    public Set<String> <%= relationshipFieldName %>Ids = new HashSet<>();

    @N1qlJoin(on = "lks.<%= relationshipFieldName %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
        <%_ } _%>
    <%_ } _%>
    public Set<<%= otherEntity.persistClass %>> <%= relationshipFieldNamePlural %> = new HashSet<>();

    <%_ } else if (relationshipType === 'many-to-one') {
            if (databaseType === 'sql') {
    _%>
    @ManyToOne<% if (relationshipRequired) { %>(optional = false)<% } %>
    @JoinColumn(name = "<%= `${relationship.columnName}_id` %>")
        <%_ if (relationshipValidate) { _%>
          <%_ if (relationshipRequired) { _%>
    @NotNull
          <%_ } _%>
        <%_ }
    } else if (databaseType === 'mongodb' || databaseType === 'couchbase') {
        if (databaseType === 'mongodb') { _%>
    @DBRef
    <%_ } _%>
    @Field("<%= relationshipFieldName %>")
    <%_ if (databaseType === 'couchbase') { _%>
     public String <%= relationshipFieldName %>Id;

    @N1qlJoin(on = "lks.<%= relationshipFieldName %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
    <%_ }
    }
    _%>
    public <%= otherEntity.persistClass %> <%= relationshipFieldName %>;

    <%_ } else if (relationshipType === 'many-to-many') {
        if (databaseType === 'sql') { _%>
    @ManyToMany<% if (ownerSide === false) { %>(mappedBy = "<%= otherEntityRelationshipNamePlural %>")<% } %>
            <%_ if (enableHibernateCache) { _%>
    @Cache(usage = CacheConcurrencyStrategy.<% if (readOnly) { %>READ_ONLY<% } else { %>READ_WRITE<% } %>)
            <%_ } _%>
        <%_ if (relationship.shouldWriteJoinTable) {
            if (relationshipValidate) { _%>
          <%_ if (relationshipRequired) { _%>
    @NotNull
          <%_ } _%>
        <%_ } _%>
    @JoinTable(name = "<%= relationship.joinTable.name %>",
               joinColumns = @JoinColumn(name = "<%= `${entityTableName}_id` %>", referencedColumnName = "id"),
               inverseJoinColumns = @JoinColumn(name = "<%= `${relationship.columnName}_id` %>", referencedColumnName = "id"))
        <%_ }
        } else if (databaseType === 'mongodb' || databaseType === 'couchbase') {
            if (databaseType === 'mongodb') { _%>
    @DBRef
        <%_ } _%>
    @Field("<%= relationshipFieldNamePlural %>")
        <%_ if (databaseType === 'couchbase') { _%>
    public Set<String> <%= relationshipFieldName %>Ids = new HashSet<>();

    @N1qlJoin(on = "lks.<%= relationshipFieldNamePlural %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
        <%_ }
         } if (ownerSide === false) { _%>
    <%_ } _%>
    public Set<<%= otherEntity.persistClass %>> <%= relationshipFieldNamePlural %> = new HashSet<>();

    <%_ } else {
        if (databaseType === 'sql') {
            if (ownerSide) { _%>
    @OneToOne<% if (relationshipRequired) { %>(optional = false)<% } %>
            <%_ if (relationshipValidate) { _%>
              <%_ if (relationshipRequired) { _%>
    @NotNull
              <%_ } _%>
            <%_ }_%>
            <%_ if (isUsingMapsId === true) { %>
    @MapsId
    @JoinColumn(name = "id")
            <%_ } else { _%>
    @JoinColumn(unique = true)
            <%_ } _%>
        <%_ } else { _%>
    @OneToOne(mappedBy = "<%= otherEntityRelationshipName %>")
    @JsonIgnore
        <%_ }
        } else if (databaseType === 'mongodb' || databaseType === 'couchbase') {
            if (databaseType === 'mongodb') { _%>
    @DBRef
        <%_ } _%>
    @Field("<%= relationshipFieldName %>")
        <%_ if (databaseType === 'couchbase') { _%>
    public String <%= relationshipFieldName %>Id;

    @N1qlJoin(on = "lks.<%= relationshipFieldName %>=meta(rks).id", fetchType = FetchType.IMMEDIATE)
        <%_ }
            if (ownerSide === false) { _%>
    @com.fasterxml.jackson.annotation.JsonBackReference
    <%_     }
        } _%>
    public <%= otherEntity.persistClass %> <%= relationshipFieldName %>;

    <%_ }
    } _%>
    // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof <%= persistClass %>)) {
            return false;
        }
        return id != null && id.equals(((<%= persistClass %>) o).id);
    }

    @Override
    public int hashCode() {
        return 31;
    }

    @Override
    public String toString() {
        return "<%= persistClass %>{" +
            "id=" + id +
        <%_ for (const field of fields.filter(field => !field.id)) {
            const fieldType = field.fieldType;
                const fieldTypeBlobContent = field.fieldTypeBlobContent;
                const fieldName = field.fieldName;
                const fieldInJavaBeanMethod = field.fieldInJavaBeanMethod;
                const isNumeric = ['integer', 'long', 'float', 'double', 'bigdecimal'].includes(fieldType.toLowerCase()); _%>
            ", <%= fieldName %>=<% if (! isNumeric) {%>'<% } %>" + <%= fieldName %> <% if (! isNumeric) { %>+ "'" <% } %>+
                <%_ if ((fieldType === 'byte[]' || fieldType === 'ByteBuffer') && fieldTypeBlobContent !== 'text') { _%>
            ", <%= fieldName %>ContentType='" + <%= fieldName %>ContentType + "'" +
                <%_ } _%>
            <%_ } _%>
            "}";
    }
<%_ if (!viaRepository) { _%>

<%- include('../_partials/imperative/common/persist', this) -%>

<%- include('../_partials/imperative/common/finders', this) -%>
<%_ } _%>
}
