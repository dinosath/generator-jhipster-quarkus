<%#
 Copyright 2020-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.web.rest;

import io.quarkus.oidc.IdToken;
import io.quarkus.oidc.OidcConfigurationMetadata;
import io.quarkus.oidc.runtime.DefaultTenantConfigResolver;
import io.quarkus.security.Authenticated;
import io.vertx.core.http.HttpHeaders;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.eclipse.microprofile.jwt.JsonWebToken;

import jakarta.enterprise.context.RequestScoped;
import jakarta.inject.Inject;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import java.util.Map;

import static java.util.Arrays.asList;

/**
 * REST controller for managing global OIDC logout.
 */
@Path("/api/logout")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
@RequestScoped
public class LogoutResource {

    @Inject
    @IdToken
    JsonWebToken idToken;

    @ConfigProperty(name = "quarkus.oidc.authentication.cookie-path")
    String cookiePath;

    @Inject
    OidcConfigurationMetadata configMetadata;

    @Inject
    DefaultTenantConfigResolver tenantResolver;

    /**
     * {@code POST  /api/logout} : logout the current user.
     *
     * @return the {@link Response} with status {@code 200 (OK)} and a body with a global logout URL and ID token.
     */
    @POST
    @Authenticated
    public Response logout(@HeaderParam(value = "origin") String originUrl, HttpServerRequest httpServerRequest) {
        var logoutUrl = new StringBuilder();
        String authServerUrl = configMetadata.getIssuer();

        if (authServerUrl.contains("auth0.com")) {
            logoutUrl.append(authServerUrl.endsWith("/") ? authServerUrl + "v2/logout" : authServerUrl + "/v2/logout");
        } else {
            logoutUrl.append(configMetadata.getEndSessionUri());
        }

        if (authServerUrl.contains("auth0.com")) {
            logoutUrl
                .append("?client_id=")
                .append(tenantResolver.getTenantConfigBean().getDefaultTenant().getOidcTenantConfig().getClientId().get())
                .append("&returnTo=")
                .append(originUrl);
        } else {
            logoutUrl.append("?id_token_hint=").append(idToken.getRawToken()).append("&post_logout_redirect_uri=").append(originUrl);
        }

        var logoutDetails = Map.of("logoutUrl", logoutUrl.toString());
        var response = Response.ok(logoutDetails);
        var newCookies = Optional.of(httpServerRequest).map(HttpServerRequest::cookies)
            .orElseGet(HashSet::new).stream().map(cookie ->
                new NewCookie(cookie.getName(), "", cookiePath, cookie.getDomain(), "", 0, cookie.isSecure())
            ).collect(Collectors.toList());
        response.cookie(newCookies.toArray(new NewCookie[0]));
        return response.build();
    }
}
